@page "/articoli/nuovo"
@using PrinterCell.Client.Services
@using PrinterCell.Shared.Models
@inject PrinterCell.Client.Services.IndexedDbService Db
@inject NavigationManager Nav

<h3>Nuovo articolo</h3>

<div class="card p-3">
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">@error</div>
    }

    <div class="row g-2">
        <div class="col-12 col-md-3">
            <label class="form-label">Codice *</label>
            <input class="form-control" @bind="modello.Codice" />
        </div>
        <div class="col-12 col-md-6">
            <label class="form-label">Descrizione *</label>
            <input class="form-control" @bind="modello.Descrizione" />
        </div>
        <div class="col-12 col-md-3">
            <label class="form-label">Quantità</label>
            <input class="form-control" type="number" @bind="modello.Quantita" />
        </div>
    </div>

    <div class="mt-3 d-flex gap-2">
        <button class="btn btn-primary" @onclick="Salva" disabled="@isSaving">Salva</button>
        <button class="btn btn-secondary" @onclick="Annulla" disabled="@isSaving">Annulla</button>
    </div>
</div>

@code {
    private Articolo modello = new();   // Id viene generato da IndexedDB (autoIncrement)
    private string? error;
    private bool isSaving;

    protected override async Task OnInitializedAsync()
    {
        await Db.InitAsync();
        modello.Quantita = 0;
    }

    private async Task Salva()
    {
        error = null;

        // Validazioni minime
        if (string.IsNullOrWhiteSpace(modello.Codice))
        {
            error = "Il campo 'Codice' è obbligatorio.";
            return;
        }
        if (string.IsNullOrWhiteSpace(modello.Descrizione))
        {
            error = "Il campo 'Descrizione' è obbligatorio.";
            return;
        }
        if (modello.Quantita < 0)
        {
            error = "La quantità non può essere negativa.";
            return;
        }

        try
        {
            isSaving = true;

            // Non impostare Id: lo genera lo store (keyPath 'Id', autoIncrement: true)
            _ = await Db.AddArticoloAsync(modello);

            // Torna all'elenco
            Nav.NavigateTo("articoli");
        }
        catch (Exception ex)
        {
            error = $"Errore durante il salvataggio: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Annulla() => Nav.NavigateTo("/articoli");
}
